---
output-file: index
title: Scientific visualisation with Python
authors:
  - name: James Emberton
    affiliations: ICCS - University of Cambridge
    orcid:
  - name: Jack Atkinson
    orcid: 0000-0001-5001-4812
    affiliations: ICCS - University of Cambridge
format: 
  revealjs:
    title-slide-attributes: 
      data-background-image: images/ICCS_title_slide.png
    theme: custom_theme.scss
    embed-resources: false
    incremental: true
    history: false
    smaller: true
    highlight-style: a11y
    code-line-numbers: false
    scrollable: true
    auto-stretch: false
    # parallax-background-image: images/ICCS_content_slide.png
    # parallax-background-size: 110%
    # parallax-background-horizontal: 0
    # margin: 0.25
    logo: https://iccs.cam.ac.uk/sites/iccs.cam.ac.uk/files/iccs_ucam_combined_reverse_colour.png
jupyter: python3
---

## 

\

"The greatest value of a picture is when it forces us to notice what we never expected to see." — John W. Tukey

\

"Data are just summaries of thousands of stories – tell a few of those stories to help make the data meaningful." — Chip & Dan Heath



## Summary

Principles of good visualisation\
Working with common climate science data formats\
Animating data



## Anatomy of a Matplotlib plot

:::: {.columns}

::: {.column width="50%"}
![](images/anatomy_of_a_plot.webp)
:::

::: {.column width="50%"}
'Figure' is the canvas on which you add one or more axes

'Axes' is the part of the Figure where information is added

'Artist' is the base class for all elements that can be added to the axes - 2D line, patch, text

'Axis' is the x- or y-axis (not to be confused with axes)
:::
::::



## The Matplotlib interface

:::: {.columns}
::: {.column width="50%"}

Pyplot (Implicit)

```python
import matplotlib.pyplot as plt

plt.plot([1, 2, 3], [4, 5, 6])

plt.title('Title')
plt.xlabel('x-label')
plt.ylabel('y-label')

plt.legend()

plt.show()
```
:::
::: {.column width="50%"}

Core Matplotlib (Explicit)

```python
import matplotlib.pyplot as plt

fig = plt.figure()

ax = fig.subplots()
ax.plot([1, 2, 3], [4, 5, 6])

ax.set_title('Title')
ax.set_xlabel('xlabel')
ax.set_ylabel('ylabel')

ax.legend()

plt.show()
```
:::
::::

Plain Pyplot is a simplified interface for quick plotting

Explicit approach allows advanced plot customsiation.



## Matplotlib customisations: Jupyter Lab Exercise 1

:::: {.columns}
::: {.column}

![](images/plt_inset.png){width=350}

![](images/plt_annot.png){width=350}
:::

::: {.column}
![](images/plt_dates.png){width=350}
:::
::::



## Plotting NetCDF data with basic Matplotlib commands: Jupyter Lab Exercise 2

![](images/plt_netcdf.png){height=500}



## Introduction to Cartopy
:::: {.columns}
::: {.column width="50%"}

- Geospatial plotting package built on top of Matplotlib, PROJ, Shapely and NumPy
- Projections and transformations
- Data handling
- Plotting and visualisation

:::
::: {.column width="50%"}
![](images/cartopy_image.png){height=300}
:::
::::



## Examples of Cartopy features: Jupyter Lab Exercise 4

:::: {.columns}
::: {.column}

Geographic maps

![Global coastline map](images/Cartopy_coastlines.png){width=500}

:::

::: {.column}
Feature maps

![](images/Cartopy_features.png){width=300}

:::
::::



## Using Features and Projections in Cartopy

![](images/cartopy_projection_netcdf.png){height=450}
