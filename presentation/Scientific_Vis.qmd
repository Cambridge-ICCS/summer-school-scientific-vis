---
output-file: index
title: Scientific visualisation with Python
authors:
  - name: James Emberton
    affiliations: ICCS - University of Cambridge
    orcid:
  - name: Jack Atkinson
    orcid: 0000-0001-5001-4812
    affiliations: ICCS - University of Cambridge
format: 
  revealjs:
    title-slide-attributes: 
      data-background-image: images/ICCS_title_slide.png
    theme: custom_theme.scss
    embed-resources: false
    incremental: true
    history: false
    smaller: true
    highlight-style: a11y
    code-line-numbers: false
    scrollable: false
    auto-stretch: false
    # parallax-background-image: images/ICCS_content_slide.png
    # parallax-background-size: 110%
    # parallax-background-horizontal: 0
    # margin: 0.25
    logo: https://iccs.cam.ac.uk/sites/iccs.cam.ac.uk/files/iccs_ucam_combined_reverse_colour.png
jupyter: python3
---

## Summary

- Discuss examples of good and bad visualisations \
- Principles of good visualisation\
- Explore plotting with Python, Matplotlib and Cartopy in Jupyter Notebook\
\
- Part theory, part practical

## Learning Outcomes

1. Tailor your visualisations to your audience
2. Avoid plotting bad habits 
3. Reinforce coding best practices
4. How to use colour to best effect
5. Fundamentals of Matplotlib - plots and animations
6. Explore Cartopy

## Setup

Navigate to:\
\
https://github.com/Cambridge-ICCS/summer-school-scientific-vis\
\
and follow installation instructions in the README.
\
This Github repo contains this presenation as an `html` file, and the jupyter notebook.
\
Launch Jupyter notebook from terminal
- navigate to notebook directory
- $jupyter notebook

## An example of a bad scientific plot

:::: {.columns}

::: {.column width=50%}
![](images/bad_plot.png){width=120%}
:::

::: {.column}
Objective:

Compare p-value and variance data for two populations highlighting statistical differences between different factors


Problems:

1. Double y-axis
2. Inverted left y-axis
3. Y-axis don't start at zero
3. Different axis scales on plots for comparison
4. Different x-axis category orders

:::
::::

Lee, K.A., Thomas, A.M., Bolte, L.A. et al. Cross-cohort gut microbiome associations with immune checkpoint inhibitor response in advanced melanoma. Nat Med 28, 535–544 (2022). https://doi.org/10.1038/s41591-022-01695-5

## Different approaches to the same data

:::: {.columns}

::: {.column}
![Figure SPM.8 in IPCC, 2021](images/ICC_2021.png)
:::

::: {.column}
![](images/BBC_ICC_2021.png)
:::

::::
BBC replotted IPCC 2021 report data for a different audience. Plot adds colour and annotation to guide interpreatation of the data for a non-technical audience.


## Anatomy of a Matplotlib plot

:::: {.columns}

::: {.column width="50%"}
![](images/anatomy_of_a_plot.webp)
:::

::: {.column width="50%"}
'Figure' is the canvas on which you add one or more axes

'Axes' is the part of the Figure where information is added

'Artist' is the base class for all elements that can be added to the axes - 2D line, patch, text

'Axis' is the x- or y-axis (not to be confused with axes)
:::
::::



## The Matplotlib interface

:::: {.columns}
::: {.column width="50%"}

Pyplot (Implicit)

```python
import matplotlib.pyplot as plt

plt.plot([1, 2, 3], [4, 5, 6])

plt.title('Title')
plt.xlabel('x-label')
plt.ylabel('y-label')

plt.legend()

plt.show()
```
:::
::: {.column width="50%"}

Core Matplotlib (Explicit)

```python
import matplotlib.pyplot as plt

fig = plt.figure()

ax = fig.subplots()
ax.plot([1, 2, 3], [4, 5, 6])

ax.set_title('Title')
ax.set_xlabel('xlabel')
ax.set_ylabel('ylabel')

ax.legend()

plt.show()
```
:::
::::

Plain Pyplot is a simplified interface for quick plotting

Explicit approach using an object oriented interface allows advanced plot customsiation.



## Matplotlib customisations: JL Ex 1

:::: {.columns}
::: {.column}

![](images/plt_inset.png){width=350}

![](images/plt_annot.png){width=350}
:::

::: {.column}
![](images/plt_dates.png){width=350}
:::
::::



## Plotting NetCDF data with basic Matplotlib: JL Ex 2

![](images/plt_netcdf.png){height=500}


## Introduction to Cartopy
:::: {.columns}
::: {.column width="50%"}

- Geospatial plotting package built on top of Matplotlib, PROJ, Shapely and NumPy
- Projections and transformations
- Data handling
- Plotting and visualisation

:::
::: {.column width="50%"}
![](images/cartopy_image.png){height=300}
:::
::::



## Examples of Cartopy features: JL Ex 3

:::: {.columns}
::: {.column}

Geographic maps

![Global coastline map](images/Cartopy_coastlines.png){width=500}

:::

::: {.column}
Feature maps

![](images/Cartopy_features.png){width=300}

:::
::::



## Using Features and Projections in Cartopy: JL Ex 4

![](images/cartopy_projection_netcdf.png){height=400}

## Visualising vector data

Plotting vector data: JL Ex 5
\
Animating vector data: JL Ex 6

## Learning Outcomes

1. Tailor your visualisations to your audience
2. Avoid plotting bad habits 
3. Coding best practices for good plots
4. How to use colour to best effect
5. Fundamentals of Matplotlib - plots and animations
6. Explore Cartopy

## 

\

"The greatest value of a picture is when it forces us to notice what we never expected to see." — John W. Tukey

\

"Data are just summaries of thousands of stories – tell a few of those stories to help make the data meaningful." — Chip & Dan Heath


## Thanks for Listening {.smaller}

:::: {.columns}

::: {.column width="20%"}
Get in touch:
:::
::: {.column width="35%"}
{{< fa pencil >}} \ James Emberton

{{< fa solid envelope >}} \ [je484[AT]cam.ac.uk](mailto:je484@cam.ac.uk)

{{< fa brands github >}} \ [j-emberton](https://github.com/j-emberton)
:::
::: {.column width="45%"}
{{< fa pencil >}} \ Jack Atkinson

{{< fa solid envelope >}} \ [jwa34[AT]cam.ac.uk](mailto:jwa34@cam.ac.uk)

{{< fa brands github >}} \ [jatkinson1000](https://github.com/jatkinson1000)

{{< fa solid globe >}} \ [jackatkinson.net](https://jackatkinson.net)

{{< fa brands mastodon >}} \ [\@jatkinson1000\@fosstodon.org](https://fosstodon.org/@jatkinson1000)
:::
::::
